The algorithm that's an improvement
on Dijkstra's algorithm-- in terms of finding a good path
faster in practice--
is called the A-star algorithm.
And basically, the intuition behind it is as follows.
Let's say I have a specific node that I'm
thinking about-- maybe-- maybe this one-- a node or a cell.
How far is it to get to the goal from this cell?
What's the length of the shortest path that gets
from this cell to the goal?
I don't know that exactly.
If I did, it would mean I've already
solved the motion-planning planning problem-- right--
if I already knew the length of the shortest path
from an arbitrary node to the goal.
But maybe I can take a guess.
Maybe I have some heuristic, which
allows me to approximate-- you know what--
how far do I have to go?
If I end up-- if I find myself in this node,
how far do I still have to go to get to the goal?
I don't know exactly.
Maybe I can guess.
So, that is called the heuristic function.
That gives you a best estimate of,
you know, how far do you still have to go from each node
to get to the goal.
And there is one particular rule for a heuristic function
to work in the A-star algorithm--
is that your guesses must always be optimistic.
You can never overestimate how far you'd have to go.
It sounds a little counter-intuitive,
but this is the way the algorithm works-- right?
So what I'm going to need is a guess.
How far do I have to go from here to the goal?
And my guess needs to always be optimistic.
How do I come up with a heuristic
that never overestimates how far I still have to go?
Well, a reasonable thing to do is to just say,
straight line distance.
Right?
You can never beat straight line distance.
So if as heuristic, I say, you know what?
This cell-- the distance I still have to go--
will be the straight line path to the goal.
You know, maybe-- maybe that's not the real path--
because it might go through some obstacles--
but at least it's never, you know, pessimistic.
It's always, at best, an optimistic estimation-- right?
So here, I have the same grid, and I
have marked each cell with the length of the straight line--
from that cell to the goal.
Right?
So in this cell right here, I'm going
to guess that the distance to the goal-- that I still
have to go-- is 4.2, because the straight line length is 4.2.
Obviously, if you look at it, that's not right.
Now if I find myself here--
then I'm not going to have a 4.2 path to the goal,
because the straight line goes through the obstacle.
But at least it's a guess, and it's an optimistic guess.
It never-- it never overestimates
the true distance, right?
And you can see for each of these nodes, right?
So, for example, right here.
How far do I have to go?
My estimate is going to be 3.2, which is the straight line
path.
OK?
So now, here is the intuition of how I'm going to use this.
I am going to start from the start--
and always, the same question as in Dijkstra's algorithm--
where do I go next?
Which nodes do I explore next?
Dijkstra has always said, I'm going to explore next--
the node that's closest to me out of all of those
that I haven't explored.
A-star says, I'm going to explore next--
the node that gives me the best chance
of finding the shortest path to the goal, based on two things--
based on how far I have traveled to get to that node,
plus my estimate of how far I still
have to go to get to the goal.
OK, so here is the full grid--
written on the board.
And inside each cell I have written this number,
which is my best estimate of how far do
I still have to go from that cell to get to the goal--
the straight line distance from that cell to the goal-- right?
So for example, from right here, the straight line distance
to the goal is 4.2.
I'm not going to find the path--
a legal path-- that has length 4.2,
because I have to go around that obstacle.
But my heuristic doesn't know that.
My heuristic just says, here's my estimate-- just based
on the straight line path.
From here to here, the straight line path is 4.0,
so I'm going to assume that from this cell to get here,
it'll cost me 4.0.
So that's just the heuristic.
The heuristic helps to guide your search towards the goal--
so that you don't just explore randomly in all directions--
just like Dijkstra's algorithm.
So, let's go through the algorithm,
and this will all become very, very clear.
This is my start.
In the lower left of each cell, I will write the length
of the shortest path-- from the start--
to that cell.
The shortest path from the start to itself,
obviously, has length zero.
In the bottom right, I'm going to put my estimate that
combines the shortest path from the start, to that goal--
to that cell--
plus my estimate of how far I still have
to travel to get to the goal.
And it's the sum of these two, right?
It's f of n, written over there.
So here, f of n is going to be 0 plus 7.8--
so it's going to be 7.8.
Now, I start the algorithm-- right?
I mark my start as visited--
OK?
So now I look at all the neighbors.
I update, first, the lengths of the shortest
paths from the start.
So, the length from the shortest path--
the length of the shortest path from the start--
is going to be this.
OK.
And then, for each of these, I say, you know what--
if I add up the length of the path from the start,
plus the estimate of how far I have to go to get to the goal--
the total number there is my best guess
of the total length of the path, to get to the goal.
So I just add those two numbers up, essentially.
OK?
And now, when I choose who to visit next,
I choose the cell with the lowest number, in white.
That's my best guess of, you know,
the best way for the entire path to go.
So 7.8-- this is the one that I'm going to visit next--
so I'm going to mark it as visited.
I'm going to update the lengths--
of the shortest paths from the start--
that go through the one that I'm visiting right now.
So 1.4 plus 1.4 will give me a 2.8 right here,
a 2.4 right here, a 2.8 here, 2.4, 2.8.
And then, I'm going to add these two numbers up
in each of these cells.
So 7.8, 8.2.
This is going to be 9.5.
This is going to be 8.1 and 9.2.
Who do I choose next?
The lowest white number I have-- it's this one-- it's 7.8.
So now I'm marking this one as visited.
I update all the neighbors with first--
the paths from the start-- so I'm going to have 4.2.
Right?
So 2.8 to get to here plus 1.4 down gives me the 4.2.
3.8 for here, and then 4.2 for here.
And then add the numbers up.
So here I'm going to have 9.2.
Here I'm going to have 8.0.
And here I'm going to have 9.6.
OK.
Who do I visit next?
This 8.0 is the lowest white number that I have--
so I'm going to visit this guy next.
What about neighbors?
Well the only neighbor that I have--
that I haven't really visited--
is this guy.
So 4.8-- I'm going to have a 5.2 path.
And then if I add these two numbers up,
I'm going to get a 9.7.
OK?
What happens next?
What is the lowest white number that I have, that's unvisited?
Well, it turns out that it's this--
this is already visited.
I should probably actually just cross off
the ones that are visited as well, just
to make it easier to see.
So what's the lowest number--
that's white-- that's unvisited?
And it turns out it's an 8.1, and it's right here.
Right?
So basically, what's happening is that Dijkstra's algorithm
expands in all directions.
A-star is guided by the heuristic
to go towards the goal.
So guided by that heuristic, A-star really took off
in a straight line--
but then it hit the obstacle.
And now it's kind of realizing, wait a second--
this isn't right.
I need to backtrack.
So 8.1 is the next one that I'm going to visit.
So let me mark this and this, and update my neighbors--
2.4.
Interesting.
Here, now, I find a 3.4.
Right?
So I have a 2.4 to get to here.
I have a 3.4.
Here, I already had a 4.2 marked,
so I'm going to delete my 4.2--
and replace it with a 3.4.
Now I have found a better path to get to here compared
to what I had before.
Right?
So it means I must also update this estimate.
Then for here I'm going to have a 3.4 as well.
Any other neighbors that I can update?
Not really-- so let's sum these up.
So I'm going to get an 8.4 here and a 9.2 here.
OK, who is the next one that I'm going to visit?
I have another 8.1 that I can visit right here.
I can also update neighbors right here.
I have a blue number of 2-- just one 2--
so I can replace the 2.8 that I had already--
just with a 2.0.
That means that I can also replace the 9.2 with an 8.4.
OK, and then for this guy, I have a 2.4 in blue,
and a 9.6 in white.
Who is the next that I'm visiting?
8.2-- I have 8.2's.
And you're starting to get a hang, also,
of how A-star works-- right?
A-star is drawn by the heuristic until it hits an obstacle.
Once it hits the obstacle, then it kind of,
starts backtracking--
right?
So I visited this 8.2.
I cross these guys off.
Turns out that I have a better path to get to here.
I had a 4.2 written in this cell,
but instead, I have 2.4 plus 1-- gives me
a 3.4, which means that I can now update here.
And instead of 9.6, I'm going to get an 8.8.
OK?
Also, down here, I'm going to get a 3.8--
in blue-- and a 9--
actually a 10.1-- in white.
So eventually, I'm going to visit this guy next--
but this won't really change anything.
I have a couple of 8.4's that I need to visit--
but then, eventually, once these guys
are visited as well-- let's quickly
go through that-- because it'll only take a second.
Let's say I visit this 8.4.
So I can replace these two numbers.
So here I'm going to get a 4.4, and here I'm
going to get an 8.9.
And then here I'm going to get a 4.8, and a 10.2.
OK?
So now this is done.
So then, eventually I'm going to visit the 8.8.
And once I visit the 8.8, let's look at the neighbors.
So 4.8 right here, 4.4 right here, 4.8 right here.
And then adding these two numbers up--
8.9, 9.4, 10.9.
OK?
So then I have an 8.9 here, which
is-- so this one I've just visited--
this is what I'm coming from.
I have an 8.9 here, so that's what I'm going to do next.
So this guy is now visited.
So let's do all the neighbors--
5.8, 6.2, 5.8, 6.2.
The sum-- so, 9.0 9.2, and 9.8.
Now this guy is the shortest-- the 8.9--
so I visit here.
And I update--
5.4, 5.8, 5.8.
And then sums--
9.0, 9.5, 10.9.
So now I have two 9.0s that I'm going to visit.
Let's say I visit this one next.
Cross it off.
Update the neighbors--
6.8, 7.2-- sums.
So here I'm going to get another 9.0.
And here a 9.2.
OK?
I'm going to do this 9.0 next, so I visit this one.
Update the neighbors--
7.8, 8.2, 8.2.
And then sums-- so 9.2 here, 10.4, 9.2.
Just for completeness, I have a 9.0 here.
This is interesting-- now I visit--
I visit this node.
And I look-- I have a 5.8 here, which
means here I can do a 6.8.
I already have an 8.2 in here.
So to this-- to get to here, how have I gotten this 8.2?
Basically, by going around like this.
Right?
This is how you get an 8.2.
Now I'm just discovering, wait a second--
there is a much shorter path to get to here--
if you go this way.
So instead, I can have--
instead of the 8.2 here, I can have a 6.8--
which means that the white number becomes 9.2.
And I'm also going to do this cell, this cell, and this cell.
None of that really ultimately matters in the end
because then the lowest number I'll have on the board is 9.2.
Let's say, maybe I visit some of these guys,
and then they'll eventually get me to the goal.
OK?
So what happens here with A-star?
The heuristic pulls it towards the goal.
It hits the obstacle.
It backtracks.
It kind of goes around a little bit.
Once it's gotten around the obstacle, again--
it makes a beeline straight for the goal.
This time there are no more obstacles,
so it ends up getting there.
Right?
Dijkstra's algorithm always goes in all directions--
visits the closest nodes first.
A-star has the yellow heuristic to pull it towards the goal--
as long as the heuristic is admissible--
as the heuristic must never--
must never overestimate the true distance.
So straight line is a reasonable heuristic.
So then it kind of gets pulled towards the goal,
once it's out from around the obstacles.
Again-- just like Dijkstra's algorithm-- the running time
for A-star, in the worst case, can
be quadratic in the number of nodes.
But in practice, A-star is actually
the algorithm of choice for many practical problems
where you have grid-based searches
for 2-D, or general, low-dimensional problems,
for mobile robots.
